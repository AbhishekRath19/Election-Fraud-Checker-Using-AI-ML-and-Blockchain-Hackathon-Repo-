// app.js (replace your submitVote with a real call)  // swap in place of the simulated version
async function submitVote() { // Triggered after user confirms selection in your modal
  if (!selectedParty) return; // guard against empty selection

  closeVoteConfirmation(); // hide modal (your existing fn)
  showLoading('Encrypting & submitting to blockchain...'); // reuse your spinner

  try {
    // A stable opaque voter ID set after your verification flow.
    // For demo, derive one locally (in production, fetch from server session).
    const voterOpaqueId = localStorage.getItem('voterOpaqueId') 
                       || (crypto.randomUUID()); // quick pseudo ID for nullifier
    localStorage.setItem('voterOpaqueId', voterOpaqueId); // persist during session

    // Call our FastAPI backend
    const res = await fetch('http://127.0.0.1:8000/cast', { // your backend URL
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ voterOpaqueId, candidateId: selectedParty.id })
    }); // POST encrypted ballot request

    if (!res.ok) throw new Error('Failed to cast vote'); // basic error handling
    const data = await res.json(); // parse backend response

    // Store tx info for your confirmation page widgets
    voteTransactionId = data.txHash; // now a real tx hash on Ganache
    // Optional: hit /tx/{hash} to fetch block number and then look up timestamp

    hideLoading(); // stop spinner
    showPage('blockchainPage'); // keep your nice animation stepper
    startBlockchainProcessing(); // your existing UI animation
  } catch (err) {
    hideLoading();
    alert('Error submitting vote: ' + err.message); // surface error
  }
} // Now your confirmation screen will show a real tx id
